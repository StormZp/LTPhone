package com.netphone.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netphone.netsdk.bean.UserInfoBean;

import com.netphone.netsdk.bean.FriendChatMsgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_CHAT_MSG_BEAN".
*/
public class FriendChatMsgBeanDao extends AbstractDao<FriendChatMsgBean, Long> {

    public static final String TABLENAME = "FRIEND_CHAT_MSG_BEAN";

    /**
     * Properties of entity FriendChatMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ReceiveId = new Property(0, String.class, "ReceiveId", false, "RECEIVE_ID");
        public final static Property Msg = new Property(1, String.class, "msg", false, "MSG");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
        public final static Property SendId = new Property(4, String.class, "sendId", false, "SEND_ID");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
        public final static Property DateTime = new Property(6, Long.class, "dateTime", false, "DATE_TIME");
    }

    private DaoSession daoSession;


    public FriendChatMsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FriendChatMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_CHAT_MSG_BEAN\" (" + //
                "\"RECEIVE_ID\" TEXT," + // 0: ReceiveId
                "\"MSG\" TEXT," + // 1: msg
                "\"NAME\" TEXT," + // 2: Name
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: id
                "\"SEND_ID\" TEXT," + // 4: sendId
                "\"USER_ID\" TEXT," + // 5: userId
                "\"DATE_TIME\" INTEGER);"); // 6: dateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_CHAT_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendChatMsgBean entity) {
        stmt.clearBindings();
 
        String ReceiveId = entity.getReceiveId();
        if (ReceiveId != null) {
            stmt.bindString(1, ReceiveId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(5, sendId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
 
        Long dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(7, dateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendChatMsgBean entity) {
        stmt.clearBindings();
 
        String ReceiveId = entity.getReceiveId();
        if (ReceiveId != null) {
            stmt.bindString(1, ReceiveId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(5, sendId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
 
        Long dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(7, dateTime);
        }
    }

    @Override
    protected final void attachEntity(FriendChatMsgBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public FriendChatMsgBean readEntity(Cursor cursor, int offset) {
        FriendChatMsgBean entity = new FriendChatMsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ReceiveId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // dateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendChatMsgBean entity, int offset) {
        entity.setReceiveId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMsg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSendId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendChatMsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendChatMsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendChatMsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(" FROM FRIEND_CHAT_MSG_BEAN T");
            builder.append(" LEFT JOIN USER_INFO_BEAN T0 ON T.\"SEND_ID\"=T0.\"USER_ID\"");
            builder.append(" LEFT JOIN USER_INFO_BEAN T1 ON T.\"USER_ID\"=T1.\"USER_ID\"");
            builder.append(" LEFT JOIN USER_INFO_BEAN T2 ON T.\"RECEIVE_ID\"=T2.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FriendChatMsgBean loadCurrentDeep(Cursor cursor, boolean lock) {
        FriendChatMsgBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserInfoBean sendBean = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setSendBean(sendBean);
        offset += daoSession.getUserInfoBeanDao().getAllColumns().length;

        UserInfoBean user = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserInfoBeanDao().getAllColumns().length;

        UserInfoBean UserInfoBean = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setUserInfoBean(UserInfoBean);

        return entity;    
    }

    public FriendChatMsgBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FriendChatMsgBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FriendChatMsgBean> list = new ArrayList<FriendChatMsgBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FriendChatMsgBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FriendChatMsgBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
