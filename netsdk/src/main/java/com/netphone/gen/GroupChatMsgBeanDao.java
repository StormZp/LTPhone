package com.netphone.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netphone.netsdk.bean.GroupInfoBean;
import com.netphone.netsdk.bean.UserInfoBean;

import com.netphone.netsdk.bean.GroupChatMsgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_CHAT_MSG_BEAN".
*/
public class GroupChatMsgBeanDao extends AbstractDao<GroupChatMsgBean, Long> {

    public static final String TABLENAME = "GROUP_CHAT_MSG_BEAN";

    /**
     * Properties of entity GroupChatMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FromUserId = new Property(0, String.class, "FromUserId", false, "FROM_USER_ID");
        public final static Property FromUserName = new Property(1, String.class, "FromUserName", false, "FROM_USER_NAME");
        public final static Property Msg = new Property(2, String.class, "Msg", false, "MSG");
        public final static Property FromGroupId = new Property(3, String.class, "FromGroupId", false, "FROM_GROUP_ID");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
        public final static Property ReceiveId = new Property(5, String.class, "receiveId", false, "RECEIVE_ID");
        public final static Property DateTime = new Property(6, Long.class, "dateTime", false, "DATE_TIME");
    }

    private DaoSession daoSession;


    public GroupChatMsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupChatMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_CHAT_MSG_BEAN\" (" + //
                "\"FROM_USER_ID\" TEXT," + // 0: FromUserId
                "\"FROM_USER_NAME\" TEXT," + // 1: FromUserName
                "\"MSG\" TEXT," + // 2: Msg
                "\"FROM_GROUP_ID\" TEXT," + // 3: FromGroupId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 4: id
                "\"RECEIVE_ID\" TEXT," + // 5: receiveId
                "\"DATE_TIME\" INTEGER);"); // 6: dateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_CHAT_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupChatMsgBean entity) {
        stmt.clearBindings();
 
        String FromUserId = entity.getFromUserId();
        if (FromUserId != null) {
            stmt.bindString(1, FromUserId);
        }
 
        String FromUserName = entity.getFromUserName();
        if (FromUserName != null) {
            stmt.bindString(2, FromUserName);
        }
 
        String Msg = entity.getMsg();
        if (Msg != null) {
            stmt.bindString(3, Msg);
        }
 
        String FromGroupId = entity.getFromGroupId();
        if (FromGroupId != null) {
            stmt.bindString(4, FromGroupId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(6, receiveId);
        }
 
        Long dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(7, dateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupChatMsgBean entity) {
        stmt.clearBindings();
 
        String FromUserId = entity.getFromUserId();
        if (FromUserId != null) {
            stmt.bindString(1, FromUserId);
        }
 
        String FromUserName = entity.getFromUserName();
        if (FromUserName != null) {
            stmt.bindString(2, FromUserName);
        }
 
        String Msg = entity.getMsg();
        if (Msg != null) {
            stmt.bindString(3, Msg);
        }
 
        String FromGroupId = entity.getFromGroupId();
        if (FromGroupId != null) {
            stmt.bindString(4, FromGroupId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(6, receiveId);
        }
 
        Long dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(7, dateTime);
        }
    }

    @Override
    protected final void attachEntity(GroupChatMsgBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public GroupChatMsgBean readEntity(Cursor cursor, int offset) {
        GroupChatMsgBean entity = new GroupChatMsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FromUserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FromUserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Msg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FromGroupId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiveId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // dateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupChatMsgBean entity, int offset) {
        entity.setFromUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFromUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromGroupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setReceiveId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupChatMsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupChatMsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupChatMsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGroupInfoBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(" FROM GROUP_CHAT_MSG_BEAN T");
            builder.append(" LEFT JOIN GROUP_INFO_BEAN T0 ON T.\"FROM_GROUP_ID\"=T0.\"GROUP_ID\"");
            builder.append(" LEFT JOIN USER_INFO_BEAN T1 ON T.\"FROM_USER_ID\"=T1.\"USER_ID\"");
            builder.append(" LEFT JOIN USER_INFO_BEAN T2 ON T.\"RECEIVE_ID\"=T2.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GroupChatMsgBean loadCurrentDeep(Cursor cursor, boolean lock) {
        GroupChatMsgBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GroupInfoBean GroupInfoBean = loadCurrentOther(daoSession.getGroupInfoBeanDao(), cursor, offset);
        entity.setGroupInfoBean(GroupInfoBean);
        offset += daoSession.getGroupInfoBeanDao().getAllColumns().length;

        UserInfoBean UserInfoBean = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setUserInfoBean(UserInfoBean);
        offset += daoSession.getUserInfoBeanDao().getAllColumns().length;

        UserInfoBean receiveBean = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setReceiveBean(receiveBean);

        return entity;    
    }

    public GroupChatMsgBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GroupChatMsgBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GroupChatMsgBean> list = new ArrayList<GroupChatMsgBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GroupChatMsgBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GroupChatMsgBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
