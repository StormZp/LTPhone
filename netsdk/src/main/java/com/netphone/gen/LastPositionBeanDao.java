package com.netphone.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netphone.netsdk.bean.LastPositionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_POSITION_BEAN".
*/
public class LastPositionBeanDao extends AbstractDao<LastPositionBean, String> {

    public static final String TABLENAME = "LAST_POSITION_BEAN";

    /**
     * Properties of entity LastPositionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", false, "ID");
        public final static Property UserID = new Property(1, String.class, "UserID", true, "USER_ID");
        public final static Property TerminalID = new Property(2, String.class, "TerminalID", false, "TERMINAL_ID");
        public final static Property Latitude = new Property(3, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, double.class, "Longitude", false, "LONGITUDE");
        public final static Property UploadDateTime = new Property(5, String.class, "UploadDateTime", false, "UPLOAD_DATE_TIME");
        public final static Property OrganizeId = new Property(6, String.class, "OrganizeId", false, "ORGANIZE_ID");
        public final static Property PositionAddress = new Property(7, String.class, "PositionAddress", false, "POSITION_ADDRESS");
    }


    public LastPositionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LastPositionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_POSITION_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: ID
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: UserID
                "\"TERMINAL_ID\" TEXT," + // 2: TerminalID
                "\"LATITUDE\" REAL NOT NULL ," + // 3: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 4: Longitude
                "\"UPLOAD_DATE_TIME\" TEXT," + // 5: UploadDateTime
                "\"ORGANIZE_ID\" TEXT," + // 6: OrganizeId
                "\"POSITION_ADDRESS\" TEXT);"); // 7: PositionAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_POSITION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastPositionBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(2, UserID);
        }
 
        String TerminalID = entity.getTerminalID();
        if (TerminalID != null) {
            stmt.bindString(3, TerminalID);
        }
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
 
        String UploadDateTime = entity.getUploadDateTime();
        if (UploadDateTime != null) {
            stmt.bindString(6, UploadDateTime);
        }
 
        String OrganizeId = entity.getOrganizeId();
        if (OrganizeId != null) {
            stmt.bindString(7, OrganizeId);
        }
 
        String PositionAddress = entity.getPositionAddress();
        if (PositionAddress != null) {
            stmt.bindString(8, PositionAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastPositionBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindString(2, UserID);
        }
 
        String TerminalID = entity.getTerminalID();
        if (TerminalID != null) {
            stmt.bindString(3, TerminalID);
        }
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
 
        String UploadDateTime = entity.getUploadDateTime();
        if (UploadDateTime != null) {
            stmt.bindString(6, UploadDateTime);
        }
 
        String OrganizeId = entity.getOrganizeId();
        if (OrganizeId != null) {
            stmt.bindString(7, OrganizeId);
        }
 
        String PositionAddress = entity.getPositionAddress();
        if (PositionAddress != null) {
            stmt.bindString(8, PositionAddress);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public LastPositionBean readEntity(Cursor cursor, int offset) {
        LastPositionBean entity = new LastPositionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TerminalID
            cursor.getDouble(offset + 3), // Latitude
            cursor.getDouble(offset + 4), // Longitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UploadDateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OrganizeId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // PositionAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastPositionBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTerminalID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setLongitude(cursor.getDouble(offset + 4));
        entity.setUploadDateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrganizeId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPositionAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LastPositionBean entity, long rowId) {
        return entity.getUserID();
    }
    
    @Override
    public String getKey(LastPositionBean entity) {
        if(entity != null) {
            return entity.getUserID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastPositionBean entity) {
        return entity.getUserID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
