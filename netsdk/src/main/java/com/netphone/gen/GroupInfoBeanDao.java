package com.netphone.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netphone.netsdk.bean.UserInfoBean;

import com.netphone.netsdk.bean.GroupInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO_BEAN".
*/
public class GroupInfoBeanDao extends AbstractDao<GroupInfoBean, String> {

    public static final String TABLENAME = "GROUP_INFO_BEAN";

    /**
     * Properties of entity GroupInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupID = new Property(0, String.class, "GroupID", true, "GROUP_ID");
        public final static Property GroupName = new Property(1, String.class, "GroupName", false, "GROUP_NAME");
        public final static Property HeadIcon = new Property(2, String.class, "HeadIcon", false, "HEAD_ICON");
        public final static Property AllCount = new Property(3, int.class, "AllCount", false, "ALL_COUNT");
        public final static Property OnLineCount = new Property(4, int.class, "OnLineCount", false, "ON_LINE_COUNT");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;


    public GroupInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO_BEAN\" (" + //
                "\"GROUP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: GroupID
                "\"GROUP_NAME\" TEXT," + // 1: GroupName
                "\"HEAD_ICON\" TEXT," + // 2: HeadIcon
                "\"ALL_COUNT\" INTEGER NOT NULL ," + // 3: AllCount
                "\"ON_LINE_COUNT\" INTEGER NOT NULL ," + // 4: OnLineCount
                "\"USER_ID\" TEXT);"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupInfoBean entity) {
        stmt.clearBindings();
 
        String GroupID = entity.getGroupID();
        if (GroupID != null) {
            stmt.bindString(1, GroupID);
        }
 
        String GroupName = entity.getGroupName();
        if (GroupName != null) {
            stmt.bindString(2, GroupName);
        }
 
        String HeadIcon = entity.getHeadIcon();
        if (HeadIcon != null) {
            stmt.bindString(3, HeadIcon);
        }
        stmt.bindLong(4, entity.getAllCount());
        stmt.bindLong(5, entity.getOnLineCount());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupInfoBean entity) {
        stmt.clearBindings();
 
        String GroupID = entity.getGroupID();
        if (GroupID != null) {
            stmt.bindString(1, GroupID);
        }
 
        String GroupName = entity.getGroupName();
        if (GroupName != null) {
            stmt.bindString(2, GroupName);
        }
 
        String HeadIcon = entity.getHeadIcon();
        if (HeadIcon != null) {
            stmt.bindString(3, HeadIcon);
        }
        stmt.bindLong(4, entity.getAllCount());
        stmt.bindLong(5, entity.getOnLineCount());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
    }

    @Override
    protected final void attachEntity(GroupInfoBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GroupInfoBean readEntity(Cursor cursor, int offset) {
        GroupInfoBean entity = new GroupInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GroupID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GroupName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // HeadIcon
            cursor.getInt(offset + 3), // AllCount
            cursor.getInt(offset + 4), // OnLineCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupInfoBean entity, int offset) {
        entity.setGroupID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAllCount(cursor.getInt(offset + 3));
        entity.setOnLineCount(cursor.getInt(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GroupInfoBean entity, long rowId) {
        return entity.getGroupID();
    }
    
    @Override
    public String getKey(GroupInfoBean entity) {
        if(entity != null) {
            return entity.getGroupID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupInfoBean entity) {
        return entity.getGroupID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(" FROM GROUP_INFO_BEAN T");
            builder.append(" LEFT JOIN USER_INFO_BEAN T0 ON T.\"USER_ID\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GroupInfoBean loadCurrentDeep(Cursor cursor, boolean lock) {
        GroupInfoBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserInfoBean userBean = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setUserBean(userBean);

        return entity;    
    }

    public GroupInfoBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GroupInfoBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GroupInfoBean> list = new ArrayList<GroupInfoBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GroupInfoBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GroupInfoBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
