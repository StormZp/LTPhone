package com.netphone.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netphone.netsdk.bean.UserInfoBean;

import com.netphone.netsdk.bean.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, Void> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Category = new Property(0, int.class, "Category", false, "CATEGORY");
        public final static Property FromUserId = new Property(1, String.class, "FromUserId", false, "FROM_USER_ID");
        public final static Property ReceiveId = new Property(2, String.class, "ReceiveId", false, "RECEIVE_ID");
        public final static Property ResourceName = new Property(3, String.class, "ResourceName", false, "RESOURCE_NAME");
        public final static Property ResourceHref = new Property(4, String.class, "ResourceHref", false, "RESOURCE_HREF");
        public final static Property Date = new Property(5, long.class, "date", false, "DATE");
    }

    private DaoSession daoSession;


    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"CATEGORY\" INTEGER NOT NULL ," + // 0: Category
                "\"FROM_USER_ID\" TEXT," + // 1: FromUserId
                "\"RECEIVE_ID\" TEXT," + // 2: ReceiveId
                "\"RESOURCE_NAME\" TEXT," + // 3: ResourceName
                "\"RESOURCE_HREF\" TEXT," + // 4: ResourceHref
                "\"DATE\" INTEGER NOT NULL );"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategory());
 
        String FromUserId = entity.getFromUserId();
        if (FromUserId != null) {
            stmt.bindString(2, FromUserId);
        }
 
        String ReceiveId = entity.getReceiveId();
        if (ReceiveId != null) {
            stmt.bindString(3, ReceiveId);
        }
 
        String ResourceName = entity.getResourceName();
        if (ResourceName != null) {
            stmt.bindString(4, ResourceName);
        }
 
        String ResourceHref = entity.getResourceHref();
        if (ResourceHref != null) {
            stmt.bindString(5, ResourceHref);
        }
        stmt.bindLong(6, entity.getDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategory());
 
        String FromUserId = entity.getFromUserId();
        if (FromUserId != null) {
            stmt.bindString(2, FromUserId);
        }
 
        String ReceiveId = entity.getReceiveId();
        if (ReceiveId != null) {
            stmt.bindString(3, ReceiveId);
        }
 
        String ResourceName = entity.getResourceName();
        if (ResourceName != null) {
            stmt.bindString(4, ResourceName);
        }
 
        String ResourceHref = entity.getResourceHref();
        if (ResourceHref != null) {
            stmt.bindString(5, ResourceHref);
        }
        stmt.bindLong(6, entity.getDate());
    }

    @Override
    protected final void attachEntity(ImageBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.getInt(offset + 0), // Category
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FromUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ReceiveId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ResourceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ResourceHref
            cursor.getLong(offset + 5) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setCategory(cursor.getInt(offset + 0));
        entity.setFromUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiveId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResourceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResourceHref(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ImageBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ImageBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ImageBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserInfoBeanDao().getAllColumns());
            builder.append(" FROM IMAGE_BEAN T");
            builder.append(" LEFT JOIN USER_INFO_BEAN T0 ON T.\"FROM_USER_ID\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ImageBean loadCurrentDeep(Cursor cursor, boolean lock) {
        ImageBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserInfoBean formUser = loadCurrentOther(daoSession.getUserInfoBeanDao(), cursor, offset);
        entity.setFormUser(formUser);

        return entity;    
    }

    public ImageBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ImageBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ImageBean> list = new ArrayList<ImageBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ImageBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ImageBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
